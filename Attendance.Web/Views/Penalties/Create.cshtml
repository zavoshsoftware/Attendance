@model Attendance.Models.Entities.Penalty
@using Attendance.Core.Enums
@{
    ViewBag.Title = "افزودن " + Server.HtmlDecode(Html.DisplayNameFor(model => model).ToString());
    Layout = "~/Views/Shared/BackEndLayout/_BackEndLayout.cshtml";
    Model.IsActive = true;
}

<h2>ثبت توقیفی @Html.DisplayNameFor(model => model)</h2>

@using (Html.BeginForm("Create", "Penalties", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)

        <div class="form-group">
            <div class="form-group">
                @Html.LabelFor(model => model.CardId, new { @class = "control-label col-md-2" })
                <div class="col-md-10" >
                    @Html.DropDownList("CardId")
                    @Html.ValidationMessageFor(model => model.CardId)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ReasonId, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ReasonId")
                    @Html.ValidationMessageFor(model => model.ReasonId)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Penalty_PenaltyTypes, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@foreach (var item in Model)
                        {
                            <a>@(item?.PenaltyType?.Title)</a>
                        }*@
                    @foreach (var item in (List<Attendance.Models.Entities.PenaltyType>)ViewBag.PenaltyTypes)
                    {
                        @*<a>@(item?.Title)</a>*@
                        <label for="#@item.Id">@item.Title</label>
                        <input type="checkbox" id="@item.Id" onclick="checkstatus('@item.Id')" />
                    }
                    @Html.ValidationMessageFor(model => model.ReasonId)
                </div>
                <input id="penaltyTypeId" hidden name="penaltyTypeId"/>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.PenaltyType, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.PenaltyType)

                    @foreach (var name in Enum.(typeof(Attendance.Core.Entity.PenaltyType)).Cast<Attendance.Core.Entity.PenaltyType>().Select(v => v.ToString()).ToList())
                    {
                        <a>@(name)
                            </a>
                    }
                    @Html.ValidationMessageFor(model => model.PenaltyType)

                </div>
                </div>*@

            @*<div class="form-group">
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Solved)

                    </div>
                </div>*@

            <div class="form-group" hidden>
                <div class="col-md-2">
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.IsActive)

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description)

                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>

            <div class="form-group" id="buttons">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="ایجاد" class="btn btn-primary" />
                    @Html.ActionLink("بازگشت به فهرست", "Index")
                </div>
            </div>
        </div>
    </div>
}

@section Scripts{

    <script>
        Array.prototype.remove = function (x) {
            var i;
            for (i in this) {
                if (this[i].toString() == x.toString()) {
                    this.splice(i, 1)
                }
            }
        }
        var penaltyTypeList = [];
        function checkstatus(id) {
            console.log(id)
            let isChecked = $('#' + id).is(":checked")
            console.log(isChecked)
            if (isChecked) {
                penaltyTypeList.push(id);
            }
            else {
                penaltyTypeList.remove(id);
            }

            $('#penaltyTypeId').val(JSON.stringify(penaltyTypeList))
            console.log(JSON.stringify(penaltyTypeList));
        }
    </script>
}