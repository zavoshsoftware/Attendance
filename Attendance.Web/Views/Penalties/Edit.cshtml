@model Attendance.Models.Entities.Penalty

@{
    ViewBag.Title = "ویرایش " + Server.HtmlDecode(Html.DisplayNameFor(model => model).ToString());
    Layout = "~/Views/Shared/BackEndLayout/_BackEndLayout.cshtml";
    var SelectedPenaltyTypes = (List < Attendance.Models.Entities.PenaltyType >) ViewBag.SelectedPenaltyTypes;
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Edit", "Penalties", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)


        <div class="form-group">
            @Html.LabelFor(model => model.ReasonId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ReasonId")
                @Html.ValidationMessageFor(model => model.ReasonId)
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Penalty_PenaltyTypes, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@foreach (var item in Model)
                    {
                        <a>@(item?.PenaltyType?.Title)</a>
                    }*@
                @foreach (var item in (List<Attendance.Models.Entities.PenaltyType>)ViewBag.PenaltyTypes)
                {
                    @*<a>@(item?.Title)</a>*@
                    <label for="#@item.Id">@item.Title</label>
                    <input type="checkbox" id="@item.Id" @(SelectedPenaltyTypes.Any(x=>x.Id==item.Id)?"checked":"")  onclick="checkstatus('@item.Id')" />
                } 
            </div>
            <input id="penaltyTypeId" hidden name="penaltyTypeId" value="@(Newtonsoft.Json.JsonConvert.SerializeObject(SelectedPenaltyTypes.Select(x=>x.Id)))"/>
        </div>
        @*<div class="form-group">
                @Html.LabelFor(model => model.PenaltyType, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.PenaltyType)
                    @Html.ValidationMessageFor(model => model.PenaltyType)
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.CardId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CardId", String.Empty)
                @Html.ValidationMessageFor(model => model.CardId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Solved, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Solved)
                @Html.ValidationMessageFor(model => model.Solved)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>
        </div>

        @Html.HiddenFor(model => model.CreationDate)
        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>

        <div class="form-group" id="buttons">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="ثبت" class="btn btn-primary font-medium" />
                @Html.ActionLink("بازگشت به فهرست", "Index")
            </div>
        </div>
    </div>
}


@section Scripts{

    <script>
        Array.prototype.remove = function (x) {
            var i;
            for (i in this) {
                if (this[i].toString() == x.toString()) {
                    this.splice(i, 1)
                }
            }
        }
        var penaltyTypeList =[]
      

        $(document).ready(function () {
            penaltyTypeList = JSON.parse($('#penaltyTypeId'))
            console.log(penaltyTypeList)
        });

        function checkstatus(id) {
            console.log(id)
            let isChecked = $('#' + id).is(":checked")
            console.log(isChecked)
            if (isChecked) {
                penaltyTypeList.push(id);
            }
            else {
                penaltyTypeList.remove(id);
            }

            $('#penaltyTypeId').val(JSON.stringify(penaltyTypeList))
            console.log(JSON.stringify(penaltyTypeList));
        }
    </script>
}