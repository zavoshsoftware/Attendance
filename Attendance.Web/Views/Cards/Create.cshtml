@model Attendance.Models.Entities.Card

@{
    ViewBag.Title = "افزودن " + Server.HtmlDecode(Html.DisplayNameFor(model => model).ToString());
    Layout = "~/Views/Shared/BackEndLayout/_BackEndLayout.cshtml";
}

<h2>افزودن @Html.DisplayNameFor(model => model)</h2>

@using (Html.BeginForm("Create", "Cards", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)

        <div class="form-group">

            <div class="form-group">
                @Html.LabelFor(model => model.DriverId, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@Html.DropDownList("DriverId", String.Empty)*@
                    @Html.ValidationMessageFor(model => model.DriverId)
                    <select id="DriverId" name="DriverId" class="DriverSelect form-control k-select" required></select>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Driver.FullName, new { @class = "control-label col-md-2" })
                <div class="col-md-10 FullName">
                </div>
            </div>

            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.Code, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Code)

                    @Html.ValidationMessageFor(model => model.Code)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Day, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Day)

                    @Html.ValidationMessageFor(model => model.Day)
                </div>
            </div>


            @if (User.Identity.IsAuthenticated)
            {
                var identity = (System.Security.Claims.ClaimsIdentity)User.Identity;
                string role = identity.FindFirst(System.Security.Claims.ClaimTypes.Role).Value;
                if (role == "SuperAdmin")
                {
                    <div class="form-group">
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.IsHidden)
                            @Html.ValidationMessageFor(model => model.IsHidden)
                        </div>
                    </div>
                }
                @*else
                {
                    @Html.HiddenFor(model => model.IsHidden)
                }*@
            }

            <div class="form-group" >
                <div class="col-md-2">
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.IsActive,new { @value = "true"})
                    @Html.ValidationMessageFor(model => model.IsActive)
                </div>
            </div>

            <div class="form-group" hidden>
                @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description)

                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>


            <div class="form-group" id="buttons">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="ایجاد" class="btn btn-primary" />
                    @Html.ActionLink("بازگشت به فهرست", "Index")
                </div>
            </div>
        </div>
    </div>
}

@section scripts {
    <script src="~/Scripts/select2.min.js"></script>

    <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>

    <script src="~/signalr/hubs"></script>

    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.atnHub;
            // Create a function that the hub can call back to display messages.
            chat.client.Generate = function (code, opId) {
                console.log(code,opId)
                if (getCookie("OperatorId") === opId) {
                    // Add the message to the page.
                    $('#Code').val(code)
                }
            };
            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.CodeGenerator();
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
         
        var selData = $(".DriverSelect").select2({
            ajax: {
                url: '/cards/GetDriverList',
                data: function (params) {
                    return {
                        q: params.term// search term
                    };
                },
                processResults: function (data) {
                    return {
                        dropdownParent: $(".DriverSelect"),
                        results: $.map(data.items, function (obj) {
                            return {
                                id: obj.Id, text: obj.Text // <- this is what was done to fix the issue
                            };
                        })
                    };
                },
                initSelection: function (element, callback) {
                    var data = { id: element.val(), text: element.val() };
                    callback(data);
                }
            }
        });

        $('.DriverSelect').on("change", function (e) {

            var lastValue = e.currentTarget.value;
            var lastText = e.currentTarget.textContent;
            $.post("/Cards/GetDriver",
                {
                    q: lastValue
                },
                function (data, status) {
                    //alert("Data: " + data + "\nStatus: " + status);
                    console.log(data.DriverFirstName, data.DriverLastName)
                    $('.FullName').html(data.DriverFirstName + ' '+ data.DriverLastName)
                });
        });
    </script>
}
